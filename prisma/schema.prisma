generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Account {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.String
  access_token       String?   @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.String
  session_state      String?
  user               User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  newsdetail    Newsdetails[] 
}

model VerificationToken {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}


model Newsdetails {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  header String 
  content String
  imageUrl String[]
  publicId String[]
  eventplace String
  source String
  socialmedialinks String[]
  newsdatetime DateTime
  catName String?
  category Category? @relation(fields : [catName] , references :[catName])
  author User @relation(fields : [authorEmail], references : [email])
  authorEmail String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  catName String @unique
  newsdetail Newsdetails[]
  newsdetailIDs String[]  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Services {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  servicesname String @unique
  servicesId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contactus {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  email String 
  message String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


